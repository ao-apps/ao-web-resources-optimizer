<?xml version="1.0" encoding="UTF-8"?>
<!--
ao-web-resources-optimizer - Automatic and dynamic web resource optimization via WRO4J.
Copyright (C) 2020, 2021  AO Industries, Inc.
    support@aoindustries.com
    7262 Bull Pen Cir
    Mobile, AL 36695

This file is part of ao-web-resources-optimizer.

ao-web-resources-optimizer is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ao-web-resources-optimizer is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with ao-web-resources-optimizer.  If not, see <http://www.gnu.org/licenses />.
-->
<jsp:root
	xmlns:ao="https://oss.aoapps.com/taglib/"
	xmlns:core="https://semanticcms.com/core/taglib/"
	xmlns:jsp="http://java.sun.com/JSP/Page"
	xmlns:section="https://semanticcms.com/section/taglib/"
	version="2.1"
>
	<jsp:directive.page language="java" pageEncoding="UTF-8" />
	<jsp:directive.page session="false" />
	<core:page
		title="@{documented.name}"
		description="@{documented.description}"
		datePublished="2020-03-01T11:20:21-06:00"
		dateModified="2021-07-12T13:25:42-05:00"
	>
		<core:child page="changelog.jspx" />
		<core:child page="apidocs/index.jspx" />
		<header>
			<ao:include
				page="/ao-badges/badges.inc.jspx"
				arg.projectStatus="alpha"
				arg.managementStatus="preview"
				arg.packagingStatus="developmental"
				arg.javaseVersion="@{documented.javase.version}"
				arg.javaeeVersion="@{documented.javaee.version}"
				arg.semanticVersioning="2.0.0"
				arg.license="lgpl-3.0"
				arg.scmUrl="@{project.scm.url}"
				arg.githubBuildWorkflow="Build"
			/>
		</header>
		<p>
			Automatic and dynamic web resource optimization via <ao:a href="http://wro4j.github.io/wro4j/">WRO4J</ao:a>.
		</p>
		<section:nav label="Project Links">
			<ul>
				<li><core:link page="index.jspx">Project Home</core:link></li>
				<li><core:link page="changelog.jspx">Changelog</core:link></li>
				<li><core:link page="apidocs/index.jspx">API Docs</core:link></li>
				<li><ao:a href="https://search.maven.org/artifact/${ao:encodeURIComponent('@{project.groupId}')}/${ao:encodeURIComponent('@{documented.artifactId}')}">Maven Central Repository</ao:a></li>
				<li><ao:a href="@{project.scm.url}">GitHub</ao:a></li>
			</ul>
		</section:nav>
		<section:section label="TODO">
			<ul>
				<li>Support combining automatically (but not inlined).
					<pre>Rewriting all URL() to be relative to the web root /contextPath/â€¦</pre>
				</li>
				<li>Also support minification
<pre>Independent of inline / combined / single
https://yui.github.io/yuicompressor/
https://github.com/simschla/fast-and-simple-minify
https://www.baeldung.com/maven-minification-of-js-and-css-assets
	This also has an ebook for building REST AIP in Spring - neat!
https://stackoverflow.com/questions/1379856/how-do-you-automate-javascript-minification-for-your-java-web-applications
	Lots of minifier options listed here
	https://github.com/mwanji/humpty
		Looks like a one-release dead project.
	https://github.com/wro4j/wro4j (this looks very promising!)
		https://blog.jamesdbloom.com/JSAndCSSMinificationWithWRO4J.html
			This has an example of dynamically adding
			Also has the scripts added dynamically at the end by window.online(setTimeout(...))
		LastModifiedServlet-style URL ?lastModfied=... could be our own filter/processor inlined
			CONTEXT-ONLY to not get the *.css resources from LastModifiedServlet?
			How to get the effective lastModified of the wro4j-generated *.css and *.js?
		Would we create own own WroModel, and add to it from @WebListener on each project?
		Would this be in a "ao-wro4j" project, that also automatically configures all the wro4j stuff.
		The goal is an application can just include "ao-styles", "semanticcms-*-style" and it's all automatic.
		Should we have a group "static" for things combined during maven plugin?
		Should we have a group "dynamic" for things added on-the-fly?
		Dynamic wro.xml with all registered projects?
			https://wro4j.readthedocs.io/en/stable/WroModelInterpolation/
			Each project gets its own group?
			group-ref for dependencies?
		Runtime: https://wro4j.readthedocs.io/en/stable/WroModelRuntime/
		Add our own annotated subclass of WroServletContextListener?
			Or have ao-wro4j declare it in a web-fragment.xml
			https://wro4j.readthedocs.io/en/stable/WroServletContextListener/
				WroServletContextListener.getListenerName("ao-wro4j")
		Do we somehow create groups dynamically based on what applies to the current request?
			Views, for example, can affect what is applied to the page.
		We'd need a "-print" group, to be used after the non-print
		So the grouping would have to consider ordering and -print/conditional comments.
			Could find optimal grouping while still maintaining ordering
				Starting by assuming:
					1) non-print, no conditional comments, in path order
					2) non-print, conditional comments, in path order
					3) print, no conditional comments, in path order
					4) print, conditional comments, in path order
				This definition will give a good starting point, so it won't be necessary to specify ordering for every print/conditional comment override?
				Then perform topological sort based on ordering dependencies
					This topological sort should be stable and maintain the original ordering as much as possible
			Deterministic ordering, combined with some sort of hash to generate group name dynamically</pre>
				</li>
			</ul>
		</section:section>
	</core:page>
</jsp:root>
